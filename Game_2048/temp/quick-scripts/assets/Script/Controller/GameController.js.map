{"version":3,"sources":["GameController.js"],"names":["Emiter","require","cc","Class","extends","Component","properties","unitBG","Prefab","unitPrefabs","boardUnit","Node","nodeBG","_boardPosition","_boardUnitArgs","_row","_col","_distance","_maxObj","onLoad","_instanceBoardArray","instance","addEvent","_startGameFunc","bind","systemEvent","on","SystemEvent","EventType","KEY_UP","onKeyUp","instanceBackgroundUnit","start","event","keyCode","macro","KEY","up","console","log","_moveUnit","down","emit","left","right","instanceRandomUnit","moveDirect","i","j","_canMoveUp","moveUp","unit","instantiate","randX","randY","random","addChild","position","Math","floor","tween","to","scale","easing","rowBoard","unitPos","v2","push","minX","maxX","minY","maxY","_clearBoardGame","rowBoardArg","empty","destroyNode","x","y","_canMoveDown","_validatePosition","_canMoveLeft","_canMoveRight"],"mappings":"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","file":"GameController.js","sourceRoot":"../../../../../assets/Script/Controller","sourcesContent":["const Emiter = require('Emitter');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        unitBG: cc.Prefab,\n        unitPrefabs: cc.Prefab,\n        boardUnit: cc.Node,\n        nodeBG: cc.Node,\n        _boardPosition: [],\n        _boardUnitArgs: [],\n        _row: 4,\n        _col: 4,\n        _distance: 200,\n        _maxObj: 0,\n\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this._instanceBoardArray();\n        Emiter.instance.addEvent('startGame', this._startGameFunc.bind(this));\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        this.instanceBackgroundUnit();\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n\n    onKeyUp: function (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.up:\n                console.log('release up key');\n                //Emiter.instance.emit('moveunit', 'up');\n                this._moveUnit('up');\n                break;\n            case cc.macro.KEY.down:\n                console.log('release down key');\n                Emiter.instance.emit('moveunit', 'down');\n                break;\n            case cc.macro.KEY.left:\n                console.log('release left key');\n                Emiter.instance.emit('moveunit', 'left');\n                break;\n            case cc.macro.KEY.right:\n                console.log('release right key');\n                Emiter.instance.emit('moveunit', 'right');\n                break;\n        }\n        this.instanceRandomUnit();\n    },\n\n    _moveUnit(moveDirect) {\n        {\n            if (moveDirect == 'up') {\n                for (let i = 0; i < this._col; i++) {\n                    for (let j = 0; j < this._row; j++) {\n                        if (this._canMoveUp(i, j)) {\n                            this._boardUnitArgs[i][j].moveUp();\n\n                            this._boardUnitArgs[i][j - 1] = this._boardUnitArgs[i][j];\n                            this._boardUnitArgs[i][j] = null;\n                            cc.log(i, j)\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n\n\n    instanceRandomUnit() {\n        this._maxObj++;\n        if (this._maxObj > (this._row * this._col)) {\n            cc.log('overGame');\n            this._maxObj--;\n            return;\n        }\n        let unit = cc.instantiate(this.unitPrefabs);\n        let randX = 0;\n        let randY = 0;\n        random();\n        //cc.log(randX, randY, this._boardPosition[randX][randY])\n        while (this._boardUnitArgs[randX][randY] != null) {\n            random();\n        }\n        this._boardUnitArgs[randX][randY] = unit;\n        this.boardUnit.addChild(unit);\n        unit.position = this._boardPosition[randX][randY];\n        //cc.log(this._boardUnitArgs, 'add unit, total ', this._maxObj)\n\n        function random() {\n            randX = Math.floor(Math.random() * 4);\n            randY = Math.floor(Math.random() * 4);\n        }\n        cc.tween(unit)\n            .to(0.1, { scale: 1.1 }, { easing: 'elasticOut' })\n            .to(0.1, { scale: 1 })\n            .start()\n    },\n\n    instanceBackgroundUnit() {\n        for (let i = 1; i <= this._row; i++) {\n            let rowBoard = [];\n            for (let j = 1; j <= this._col; j++) {\n                let unit = cc.instantiate(this.unitBG);\n                let unitPos = cc.v2(((j - (this._col + 1) / 2) * this._distance), ((i - (this._row + 1) / 2) * this._distance))\n                unit.position = unitPos;\n                rowBoard.push(unitPos);\n                this.nodeBG.addChild(unit);\n            }\n            this._boardPosition.push(rowBoard);\n        }\n        let minX = (1 - (this._col + 1) / 2) * this._distance;\n        let maxX = (this._col - (this._col + 1) / 2) * this._distance;\n        let minY = (1 - (this._row + 1) / 2) * this._distance;\n        let maxY = (this._row - (this._row + 1) / 2) * this._distance;\n        Emiter.instance.emit('setMinMaxPosition', minX, maxX, minY, maxY);\n    },\n\n    _startGameFunc() {\n        this._clearBoardGame();\n        this.instanceRandomUnit();\n        this.instanceRandomUnit();\n    },\n\n    _instanceBoardArray() {\n        for (let i = 0; i < this._row; i++) {\n            let rowBoardArg = [];\n            for (let j = 0; j < this._col; j++) {\n                let empty = null;\n                rowBoardArg.push(empty);\n            }\n            this._boardUnitArgs.push(rowBoardArg);\n        }\n    },\n\n    _clearBoardGame() {\n        for (let i = 0; i < this._row; i++) {\n            for (let j = 0; j < this._col; j++) {\n                if (this._boardUnitArgs[i][j] != null) {\n                    this._boardUnitArgs[i][j].destroyNode();\n                }\n                this._boardUnitArgs[i][j] = null;\n            }\n        }\n        this._maxObj = 0;\n        cc.log(this._boardUnitArgs)\n    },\n\n\n    _canMoveUp(x, y) {\n        if (y <= 0) return false;\n        if (this._boardUnitArgs[x][y] == null) {\n            cc.log('null obj');\n            return false;\n        }\n        if (this._boardUnitArgs[x][y - 1] != null) {\n            return false;\n        } else return true;\n    },\n    _canMoveDown(x, y) {\n        if (this._validatePosition(x, y) == false) return false;\n        if (this._boardUnitArgs[x][y + 1] != null) {\n            return false;\n        } else return true;\n    },\n    _canMoveLeft(x, y) {\n        if (this._validatePosition() == false) return false;\n        if (this._boardUnitArgs[x - 1][y] != null) {\n            return false;\n        } else return true;\n    },\n    _canMoveRight(x, y) {\n        if (this._validatePosition() == false) return false;\n        if (this._boardUnitArgs[x + 1][y] != null) {\n            return false;\n        } else return true;\n    },\n\n    _validatePosition(x, y) {\n        if (x <= 0 || x >= this._col || y <= 0 || y >= this._row) return false;\n        if (this._boardUnitArgs[x][y] == null) {\n            cc.log('null obj');\n            return false;\n        }\n    }\n});\n"]}