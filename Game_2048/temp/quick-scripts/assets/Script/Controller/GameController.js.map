{"version":3,"sources":["GameController.js"],"names":["Emiter","require","cc","Class","extends","Component","properties","unitBG","Prefab","unitPrefabs","boardUnit","Node","nodeBG","_boardPosition","_boardUnitArgs","_row","_col","_distance","_maxObj","_canPress","onLoad","instance","addEvent","_startGameFunc","bind","systemEvent","on","SystemEvent","EventType","KEY_UP","onKeyUp","instanceBackgroundUnit","_instanceBoardArray","start","event","keyCode","macro","KEY","up","console","log","_moveUp","down","_moveDown","left","right","tween","node","delay","call","instanceRandomUnit","unit","instantiate","randX","randY","random","addChild","position","to","scale","easing","Math","floor","i","rowBoard","j","unitPos","v2","push","_clearBoardGame","rowBoardArg","destroyNode","y","x","_movePosition","index","temp","moveUnit"],"mappings":"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","file":"GameController.js","sourceRoot":"../../../../../assets/Script/Controller","sourcesContent":["const Emiter = require('Emitter');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        unitBG: cc.Prefab,\n        unitPrefabs: cc.Prefab,\n        boardUnit: cc.Node,\n        nodeBG: cc.Node,\n        _boardPosition: [],\n        _boardUnitArgs: [],\n        _row: 4,\n        _col: 4,\n        _distance: 200,\n        _maxObj: 0,\n        _canPress: true,\n\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        Emiter.instance.addEvent('startGame', this._startGameFunc.bind(this));\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        this.instanceBackgroundUnit();\n        this._instanceBoardArray();\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n\n    onKeyUp: function (event) {\n        if (this._canPress == false) return;\n        this._canPress = false;\n        switch (event.keyCode) {\n            case cc.macro.KEY.up:\n                console.log('release up key');\n                //Emiter.instance.emit('moveunit', 'up');\n                this._moveUp();\n                break;\n            case cc.macro.KEY.down:\n                console.log('release down key');\n                // Emiter.instance.emit('moveunit', 'down');\n                this._moveDown();\n                break;\n            case cc.macro.KEY.left:\n                console.log('release left key');\n                // Emiter.instance.emit('moveunit', 'left');\n                break;\n            case cc.macro.KEY.right:\n                console.log('release right key');\n                // Emiter.instance.emit('moveunit', 'right');\n                break;\n        }\n        cc.tween(this.node).delay(0.25).call(() => {\n            this.instanceRandomUnit();\n            this._canPress = true;\n        }).start();\n    },\n\n    instanceRandomUnit() {\n        this._maxObj++;\n        if (this._maxObj > (this._row * this._col)) {\n            cc.log('overGame');\n            this._maxObj--;\n            return;\n        }\n        let unit = cc.instantiate(this.unitPrefabs);\n        let randX = 0;\n        let randY = 0;\n        random();\n        while (this._boardUnitArgs[randX][randY] != null) random();\n        this._boardUnitArgs[randX][randY] = unit;\n        this.boardUnit.addChild(unit);\n        unit.position = this._boardPosition[randX][randY];\n        cc.log(this._boardUnitArgs, 'add unit, total ', this._maxObj)\n\n        cc.tween(unit)\n            .to(0.1, { scale: 1.1 }, { easing: 'elasticOut' })\n            .to(0.1, { scale: 1 })\n            .start();\n\n        function random() {\n            randX = Math.floor(Math.random() * 4);\n            randY = Math.floor(Math.random() * 4);\n        }\n    },\n\n    instanceBackgroundUnit() {\n        for (let i = 1; i <= this._row; i++) {\n            let rowBoard = [];\n            for (let j = 1; j <= this._col; j++) {\n                let unit = cc.instantiate(this.unitBG);\n                let unitPos = cc.v2(((j - (this._col + 1) / 2) * this._distance), -((i - (this._row + 1) / 2) * this._distance))\n                unit.position = unitPos;\n                rowBoard.push(unitPos);\n                this.nodeBG.addChild(unit);\n            }\n            this._boardPosition.push(rowBoard);\n        }\n    },\n\n    _startGameFunc() {\n        this._clearBoardGame();\n        this.instanceRandomUnit();\n        this.instanceRandomUnit();\n    },\n\n    _instanceBoardArray() {\n        for (let i = 0; i < this._row; i++) {\n            let rowBoardArg = [];\n            for (let j = 0; j < this._col; j++) rowBoardArg.push(null);\n            this._boardUnitArgs.push(rowBoardArg);\n        }\n    },\n\n    _clearBoardGame() {\n        for (let i = 0; i < this._row; i++) {\n            for (let j = 0; j < this._col; j++) {\n                if (this._boardUnitArgs[i][j] != null) this._boardUnitArgs[i][j].destroyNode();\n                this._boardUnitArgs[i][j] = null;\n            }\n        }\n        this._maxObj = 0;\n    },\n\n\n    _moveUp() {\n        for (let y = 0; y < this._col; y++) {\n            for (let x = 0; x < this._row; x++) {\n                if (this._boardUnitArgs[x][y] != null) {\n                    if (x == 0) continue;\n                    if (this._boardUnitArgs[0][y] == null) {\n                        this._movePosition(x, y, 0)\n                    } else {\n                        let index = 0;\n                        for (let i = 0; i < x; i++) {\n                            if (this._boardUnitArgs[i][y] != null) index = i + 1;\n                        }\n                        if (index == x) continue;\n                        if (this._boardUnitArgs[index][y] == null) this._movePosition(x, y, index);\n                    }\n                }\n            }\n        }\n    },\n\n    _moveDown() {\n        for (let y = this._col - 1; y >= 0; y--) {\n            for (let x = this._row - 1; x >= 0; x--) {\n                if (this._boardUnitArgs[x][y] != null) {\n                    if (x == this._row - 1) continue;\n                    if (this._boardUnitArgs[this._row - 1][y] == null) {\n                        this._movePosition(x, y, this._row - 1)\n                    } else {\n                        let index = this._row - 1;\n                        for (let i = this._row - 1; i > x; i--) {\n                            if (this._boardUnitArgs[i][y] != null) index = i - 1;\n                        }\n                        if (index == x) continue;\n                        if (this._boardUnitArgs[index][y] == null) this._movePosition(x, y, index);\n                    }\n                }\n            }\n        }\n    },\n\n\n    _movePosition(x, y, index) {\n        cc.log(x, y, index);\n        let temp = this._boardUnitArgs[x][y];\n        this._boardUnitArgs[x][y] = this._boardUnitArgs[index][y];\n        this._boardUnitArgs[index][y] = temp;\n        this._boardUnitArgs[index][y].moveUnit(this._boardPosition[index][y]);\n    },\n\n\n});\n"]}