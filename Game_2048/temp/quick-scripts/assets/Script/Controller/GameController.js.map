{"version":3,"sources":["GameController.js"],"names":["Emiter","require","cc","Class","extends","Component","properties","unitBG","Prefab","unitPrefabs","boardUnit","Node","nodeBG","scoreTotal","Label","bestScore","_boardPosition","_boardUnitArgs","_row","_col","_distance","_maxObj","_canMoveBoard","_canInstanceUnit","_winPoint","_playOverPoint","onLoad","instance","addEvent","_startGameFunc","bind","_continuePlayOverPoint","_moveUp","_moveDown","_moveLeft","_moveRight","instanceBackgroundUnit","_instanceBoardArray","_clearBoardGame","instanceRandomUnit","randX","randY","randomXY","unit","instantiate","addChild","position","setUnitValue","randomValue","Math","floor","random","rand","_instanceUnit","tween","node","delay","call","emit","string","log","start","i","rowBoard","j","unitPos","v2","push","rowBoardArg","destroyNode","_resetScore","y","x","index","_getIndex","_moveUnitPosition","getUnitValue","_mergeUnit","currentX","currentY","indexX","indexY","temp","moveUnit","unitPoint","_addScore","getType","sortType","score","_updateBestScore","sys","localStorage","getItem","setItem"],"mappings":"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","file":"GameController.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Controller","sourcesContent":["const Emiter = require('Emitter');\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        unitBG: cc.Prefab,\r\n        unitPrefabs: cc.Prefab,\r\n        boardUnit: cc.Node,\r\n        nodeBG: cc.Node,\r\n        scoreTotal: cc.Label,\r\n        bestScore: cc.Label,\r\n        _boardPosition: [],\r\n        _boardUnitArgs: [],\r\n        _row: 4,\r\n        _col: 4,\r\n        _distance: 200,\r\n        _maxObj: 0,\r\n        _canMoveBoard: true,\r\n        _canInstanceUnit: false,\r\n        _winPoint: 0,\r\n        _playOverPoint: false,\r\n    },\r\n\r\n    onLoad() {\r\n        Emiter.instance.addEvent('startGame', this._startGameFunc.bind(this));\r\n        Emiter.instance.addEvent('continuePlayOverPoint', this._continuePlayOverPoint.bind(this));\r\n        Emiter.instance.addEvent('moveUp', this._moveUp.bind(this));\r\n        Emiter.instance.addEvent('moveDown', this._moveDown.bind(this));\r\n        Emiter.instance.addEvent('moveLeft', this._moveLeft.bind(this));\r\n        Emiter.instance.addEvent('moveRight', this._moveRight.bind(this));\r\n        this.instanceBackgroundUnit();\r\n        this._instanceBoardArray();\r\n        this._clearBoardGame();\r\n        this._winPoint = 128;\r\n    },\r\n\r\n    instanceRandomUnit() {\r\n        this._maxObj++;\r\n        if (this._maxObj > (this._row * this._col)) return;\r\n        let randX = 0;\r\n        let randY = 0;\r\n        randomXY();\r\n        while (this._boardUnitArgs[randX][randY] != null) randomXY();\r\n        let unit = cc.instantiate(this.unitPrefabs);\r\n        this._boardUnitArgs[randX][randY] = unit;\r\n        this.boardUnit.addChild(unit);\r\n        unit.position = this._boardPosition[randX][randY];\r\n        unit.setUnitValue(randomValue());\r\n        this._canMoveBoard = true;\r\n\r\n        function randomXY() {\r\n            randX = Math.floor(Math.random() * 4);\r\n            randY = Math.floor(Math.random() * 4);\r\n        }\r\n        function randomValue() {\r\n            let rand = Math.random();\r\n            rand > 0.5 ? rand = 4 : rand = 2;\r\n            return rand;\r\n        }\r\n    },\r\n\r\n    _instanceUnit() {\r\n        cc.tween(this.node).delay(0.08).call(() => {\r\n            if (this._maxObj >= 16 && this._canInstanceUnit == false) {\r\n                Emiter.instance.emit('loseGame', this.scoreTotal.string);\r\n                cc.log('end Game');\r\n            }\r\n            if (this._canInstanceUnit == false) {\r\n                this._canMoveBoard = true;\r\n                return;\r\n            }\r\n            this._canInstanceUnit = false;\r\n            Emiter.instance.emit('playSoundSlide');\r\n            this.instanceRandomUnit();\r\n        }).start();\r\n    },\r\n\r\n    instanceBackgroundUnit() {\r\n        for (let i = 1; i <= this._row; i++) {\r\n            let rowBoard = [];\r\n            for (let j = 1; j <= this._col; j++) {\r\n                let unit = cc.instantiate(this.unitBG);\r\n                let unitPos = cc.v2(((j - (this._col + 1) / 2) * this._distance), -((i - (this._row + 1) / 2) * this._distance))\r\n                unit.position = unitPos;\r\n                rowBoard.push(unitPos);\r\n                this.nodeBG.addChild(unit);\r\n            }\r\n            this._boardPosition.push(rowBoard);\r\n        }\r\n    },\r\n\r\n    _startGameFunc() {\r\n        Emiter.instance.emit('playSoundClick');\r\n        Emiter.instance.emit('playSoundBackground');\r\n        Emiter.instance.emit('canInput', true);\r\n        this._clearBoardGame();\r\n        this.instanceRandomUnit();\r\n        this.instanceRandomUnit();\r\n    },\r\n\r\n    _instanceBoardArray() {\r\n        for (let i = 0; i < this._row; i++) {\r\n            let rowBoardArg = [];\r\n            for (let j = 0; j < this._col; j++) rowBoardArg.push(null);\r\n            this._boardUnitArgs.push(rowBoardArg);\r\n        }\r\n    },\r\n\r\n    _clearBoardGame() {\r\n        for (let i = 0; i < this._row; i++) {\r\n            for (let j = 0; j < this._col; j++) {\r\n                if (this._boardUnitArgs[i][j] != null) this._boardUnitArgs[i][j].destroyNode();\r\n                this._boardUnitArgs[i][j] = null;\r\n            }\r\n        }\r\n        this._maxObj = 0;\r\n        this._playOverPoint = false;\r\n        this._resetScore();\r\n    },\r\n\r\n    _continuePlayOverPoint() {\r\n        this._playOverPoint = true;\r\n    },\r\n\r\n    _moveUp() {\r\n        if (this._canMoveBoard == false) return;\r\n        this._canMoveBoard = false;\r\n        for (let y = 0; y < this._col; y++) {\r\n            for (let x = 0; x < this._row; x++) {\r\n                let index = this._getIndex(x, y, 'col', 'forward');\r\n                if (index == x) continue;\r\n                if (this._boardUnitArgs[x][y] == null) {\r\n                    this._moveUnitPosition(index, y, x, y);\r\n                    if (index != y) y--;\r\n                    continue;\r\n                }\r\n                if (this._boardUnitArgs[x][y].getUnitValue() == this._boardUnitArgs[index][y].getUnitValue()) {\r\n                    this._moveUnitPosition(index, y, x, y);\r\n                    this._mergeUnit(x, y, index, y);\r\n                    continue;\r\n                }\r\n                this._moveUnitPosition(index, y, x + 1, y);\r\n            }\r\n        }\r\n        this._instanceUnit();\r\n    },\r\n\r\n    _moveDown() {\r\n        if (this._canMoveBoard == false) return;\r\n        this._canMoveBoard = false;\r\n        for (let y = this._col - 1; y >= 0; y--) {\r\n            for (let x = this._row - 1; x >= 0; x--) {\r\n                let index = this._getIndex(x, y, 'col', 'backward');\r\n                if (index == x) continue;\r\n                if (this._boardUnitArgs[x][y] == null) {\r\n                    this._moveUnitPosition(index, y, x, y);\r\n                    if (index != y) y++;\r\n                    continue;\r\n                }\r\n                if (this._boardUnitArgs[x][y].getUnitValue() == this._boardUnitArgs[index][y].getUnitValue()) {\r\n                    this._moveUnitPosition(index, y, x, y);\r\n                    this._mergeUnit(x, y, index, y);\r\n                    continue;\r\n                }\r\n                this._moveUnitPosition(index, y, x - 1, y);\r\n            }\r\n        }\r\n        this._instanceUnit();\r\n    },\r\n\r\n    _moveLeft() {\r\n        if (this._canMoveBoard == false) return;\r\n        this._canMoveBoard = false;\r\n        for (let x = 0; x < this._row; x++) {\r\n            for (let y = 0; y < this._col; y++) {\r\n                let index = this._getIndex(x, y, 'row', 'forward');\r\n                if (index == y) continue;\r\n                if (this._boardUnitArgs[x][y] == null) {\r\n                    this._moveUnitPosition(x, index, x, y);\r\n                    if (index != y) y--;\r\n                    continue;\r\n                }\r\n                if (this._boardUnitArgs[x][y].getUnitValue() == this._boardUnitArgs[x][index].getUnitValue()) {\r\n                    this._moveUnitPosition(x, index, x, y);\r\n                    this._mergeUnit(x, y, x, index);\r\n                    continue;\r\n                }\r\n                this._moveUnitPosition(x, index, x, y + 1);\r\n            }\r\n        }\r\n        this._instanceUnit();\r\n    },\r\n\r\n    _moveRight() {\r\n        if (this._canMoveBoard == false) return;\r\n        this._canMoveBoard = false;\r\n        for (let x = this._row - 1; x >= 0; x--) {\r\n            for (let y = this._col - 1; y >= 0; y--) {\r\n                let index = this._getIndex(x, y, 'row', 'backward');\r\n                if (index == y) continue;\r\n                if (this._boardUnitArgs[x][y] == null) {\r\n                    this._moveUnitPosition(x, index, x, y);\r\n                    if (index != y) y++;\r\n                    continue;\r\n                }\r\n                if (this._boardUnitArgs[x][y].getUnitValue() == this._boardUnitArgs[x][index].getUnitValue()) {\r\n                    this._moveUnitPosition(x, index, x, y);\r\n                    this._mergeUnit(x, y, x, index);\r\n                    continue;\r\n                }\r\n                this._moveUnitPosition(x, index, x, y - 1);\r\n            }\r\n        }\r\n        this._instanceUnit();\r\n    },\r\n\r\n    _moveUnitPosition(currentX, currentY, indexX, indexY) {\r\n        if (currentX == indexX && currentY == indexY) return;\r\n        let temp = this._boardUnitArgs[currentX][currentY];\r\n        this._boardUnitArgs[currentX][currentY] = this._boardUnitArgs[indexX][indexY];\r\n        this._boardUnitArgs[indexX][indexY] = temp;\r\n        this._boardUnitArgs[indexX][indexY].moveUnit(this._boardPosition[indexX][indexY]);\r\n        this._canInstanceUnit = true;\r\n    },\r\n\r\n    _mergeUnit(x, y, indexX, indexY) {\r\n        Emiter.instance.emit('playSoundAward');\r\n        let unitPoint = this._boardUnitArgs[x][y].getUnitValue() * 2;\r\n        this._boardUnitArgs[x][y].setUnitValue(unitPoint);\r\n        this._boardUnitArgs[indexX][indexY].destroyNode();\r\n        this._boardUnitArgs[indexX][indexY] = null;\r\n        this._addScore(this._boardUnitArgs[x][y].getUnitValue());\r\n        this._maxObj--;\r\n        if (this._playOverPoint == true) return;\r\n\r\n        if (unitPoint >= this._winPoint) Emiter.instance.emit('winGame');\r\n    },\r\n\r\n    _getIndex(x, y, getType, sortType) {\r\n        let index = null;\r\n        if (getType == 'row') {\r\n            index = y;\r\n            if (sortType == 'forward')\r\n                for (let i = this._col - 1; i > y; i--) {\r\n                    if (this._boardUnitArgs[x][i] != null) index = i;\r\n                }\r\n            if (sortType == 'backward')\r\n                for (let i = 0; i < y; i++) {\r\n                    if (this._boardUnitArgs[x][i] != null) index = i;\r\n                }\r\n        }\r\n        if (getType == 'col') {\r\n            index = x;\r\n            if (sortType == 'forward')\r\n                for (let i = this._row - 1; i > x; i--) {\r\n                    if (this._boardUnitArgs[i][y] != null) index = i;\r\n                }\r\n            if (sortType == 'backward')\r\n                for (let i = 0; i < x; i++) {\r\n                    if (this._boardUnitArgs[i][y] != null) index = i;\r\n                }\r\n        }\r\n        return index;\r\n    },\r\n\r\n    _addScore(score) {\r\n        this.scoreTotal.string = (+score) + (+this.scoreTotal.string);\r\n        this._updateBestScore();\r\n    },\r\n\r\n    _resetScore() {\r\n        this.scoreTotal.string = 0;\r\n        if (cc.sys.localStorage.getItem('BestScore')) {\r\n            this.bestScore.string = cc.sys.localStorage.getItem('BestScore');\r\n            return;\r\n        }\r\n        this.bestScore.string = 0;\r\n    },\r\n\r\n    _updateBestScore() {\r\n        if ((+this.scoreTotal.string) > (+this.bestScore.string)) {\r\n            this.bestScore.string = this.scoreTotal.string;\r\n            cc.sys.localStorage.setItem('BestScore', (+this.bestScore.string));\r\n        }\r\n    },\r\n});\r\n"]}