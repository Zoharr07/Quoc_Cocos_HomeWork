{"version":3,"sources":["KeyboardController.js"],"names":["Emiter","require","cc","Class","extends","Component","properties","_canInputKeyboard","onLoad","systemEvent","on","SystemEvent","EventType","KEY_UP","onKeyUp","instance","addEvent","_setInputKeyboard","bind","event","keyCode","macro","KEY","up","emit","down","left","right","status"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,SAAR,CAAf;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;AAELC,gBAAY;AACRC,2BAAmB;AADX,KAFP;;AAMLC,UANK,oBAMI;AACLN,WAAGO,WAAH,CAAeC,EAAf,CAAkBR,GAAGS,WAAH,CAAeC,SAAf,CAAyBC,MAA3C,EAAmD,KAAKC,OAAxD,EAAiE,IAAjE;AACAd,eAAOe,QAAP,CAAgBC,QAAhB,CAAyB,eAAzB,EAA0C,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAA1C;AACA,aAAKD,iBAAL,CAAuB,KAAvB;AACH,KAVI;;;AAYLH,aAAS,iBAAUK,KAAV,EAAiB;AACtB,YAAI,KAAKZ,iBAAL,IAA0B,KAA9B,EAAqC;AACrC,gBAAQY,MAAMC,OAAd;AACI,iBAAKlB,GAAGmB,KAAH,CAASC,GAAT,CAAaC,EAAlB;AAAsBvB,uBAAOe,QAAP,CAAgBS,IAAhB,CAAqB,QAArB;AAClB;AACJ,iBAAKtB,GAAGmB,KAAH,CAASC,GAAT,CAAaG,IAAlB;AAAwBzB,uBAAOe,QAAP,CAAgBS,IAAhB,CAAqB,UAArB;AACpB;AACJ,iBAAKtB,GAAGmB,KAAH,CAASC,GAAT,CAAaI,IAAlB;AAAwB1B,uBAAOe,QAAP,CAAgBS,IAAhB,CAAqB,UAArB;AACpB;AACJ,iBAAKtB,GAAGmB,KAAH,CAASC,GAAT,CAAaK,KAAlB;AAAyB3B,uBAAOe,QAAP,CAAgBS,IAAhB,CAAqB,WAArB;AACrB;AARR;AAUH,KAxBI;;AA0BLP,qBA1BK,6BA0BaW,MA1Bb,EA0BqB;AACtB,aAAKrB,iBAAL,GAAyBqB,MAAzB;AACH;AA5BI,CAAT","file":"KeyboardController.js","sourceRoot":"../../../../../assets/Script/Input","sourcesContent":["const Emiter = require('Emitter');\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        _canInputKeyboard: true,\n    },\n\n    onLoad() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        Emiter.instance.addEvent('inputKeyboard', this._setInputKeyboard.bind(this));\n        this._setInputKeyboard(false);\n    },\n\n    onKeyUp: function (event) {\n        if (this._canInputKeyboard == false) return;\n        switch (event.keyCode) {\n            case cc.macro.KEY.up: Emiter.instance.emit('moveUp');\n                break;\n            case cc.macro.KEY.down: Emiter.instance.emit('moveDown');\n                break;\n            case cc.macro.KEY.left: Emiter.instance.emit('moveLeft');\n                break;\n            case cc.macro.KEY.right: Emiter.instance.emit('moveRight');\n                break;\n        }\n    },\n\n    _setInputKeyboard(status) {\n        this._canInputKeyboard = status;\n    },\n});\n"]}