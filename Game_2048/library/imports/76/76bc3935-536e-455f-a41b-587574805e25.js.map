{"version":3,"sources":["../../../../assets/Script/assets/Script/BackgroundControl.js"],"names":["Emiter","require","cc","Class","extends","Component","properties","_row","_col","_distance","unitBG","Prefab","start","instanceBackgroundUnit","i","rowBoard","j","unit","instantiate","unitPos","v2","position","push","node","addChild","instance","emit","log","minX","maxX","minY","maxY"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,SAAR,CAAf;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,cAAM,CADE;AAERC,cAAM,CAFE;AAGRC,mBAAW,GAHH;AAIRC,gBAAQR,GAAGS;AAJH,KAHP;;AAUL;;AAEA;;AAEAC,SAdK,mBAcG;AACJ,aAAKC,sBAAL;AACH,KAhBI;;;AAkBL;AACAA,0BAnBK,oCAmBoB;AACrB,aAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAK,KAAKP,IAA1B,EAAgCO,GAAhC,EAAqC;AACjC,gBAAIC,WAAW,EAAf;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAK,KAAKR,IAA1B,EAAgCQ,GAAhC,EAAqC;AACjC,oBAAIC,OAAOf,GAAGgB,WAAH,CAAe,KAAKR,MAApB,CAAX;AACA,oBAAIS,UAAUjB,GAAGkB,EAAH,CAAO,CAACJ,IAAI,CAAC,KAAKR,IAAL,GAAY,CAAb,IAAkB,CAAvB,IAA4B,KAAKC,SAAxC,EAAqD,CAACK,IAAI,CAAC,KAAKP,IAAL,GAAY,CAAb,IAAkB,CAAvB,IAA4B,KAAKE,SAAtF,CAAd;AACAQ,qBAAKI,QAAL,GAAgBF,OAAhB;AACAJ,yBAASO,IAAT,CAAcH,OAAd;AACA,qBAAKI,IAAL,CAAUC,QAAV,CAAmBP,IAAnB;AACAjB,uBAAOyB,QAAP,CAAgBC,IAAhB,CAAqB,QAArB,EAA+BP,OAA/B;AACAjB,mBAAGyB,GAAH,CAAOV,IAAP;AACH;AACD,gBAAIW,OAAO,CAAC,IAAI,CAAC,KAAKpB,IAAL,GAAY,CAAb,IAAkB,CAAvB,IAA4B,KAAKC,SAA5C;AACA,gBAAIoB,OAAO,CAAC,KAAKrB,IAAL,GAAY,CAAC,KAAKA,IAAL,GAAY,CAAb,IAAkB,CAA/B,IAAoC,KAAKC,SAApD;AACA,gBAAIqB,OAAO,CAAC,IAAI,CAAC,KAAKvB,IAAL,GAAY,CAAb,IAAkB,CAAvB,IAA4B,KAAKE,SAA5C;AACA,gBAAIsB,OAAO,CAAC,KAAKxB,IAAL,GAAY,CAAC,KAAKA,IAAL,GAAY,CAAb,IAAkB,CAA/B,IAAoC,KAAKE,SAApD;AACAT,mBAAOyB,QAAP,CAAgBC,IAAhB,CAAqB,mBAArB,EAA0CE,IAA1C,EAAgDC,IAAhD,EAAsDC,IAAtD,EAA4DC,IAA5D;AACH;AAEJ;AAtCI,CAAT","file":"BackgroundControl.js","sourceRoot":"../../../../assets/Script","sourcesContent":["const Emiter = require('Emitter');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _row: 4,\n        _col: 4,\n        _distance: 200,\n        unitBG: cc.Prefab,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start() {\n        this.instanceBackgroundUnit();\n    },\n\n    // update (dt) {},\n    instanceBackgroundUnit() {\n        for (let i = 1; i <= this._row; i++) {\n            let rowBoard = [];\n            for (let j = 1; j <= this._col; j++) {\n                let unit = cc.instantiate(this.unitBG);\n                let unitPos = cc.v2(((j - (this._col + 1) / 2) * this._distance), ((i - (this._row + 1) / 2) * this._distance))\n                unit.position = unitPos;\n                rowBoard.push(unitPos);\n                this.node.addChild(unit);\n                Emiter.instance.emit('addPos', unitPos)\n                cc.log(unit)\n            }\n            let minX = (1 - (this._col + 1) / 2) * this._distance;\n            let maxX = (this._col - (this._col + 1) / 2) * this._distance;\n            let minY = (1 - (this._row + 1) / 2) * this._distance;\n            let maxY = (this._row - (this._row + 1) / 2) * this._distance;\n            Emiter.instance.emit('setMinMaxPosition', minX, maxX, minY, maxY);\n        }\n\n    }\n});\n"]}